# Кортежи тот же список, но не изменяемый
# В отличие от списка занимает меньше места в памяти
# В отличие от списка обращение к нему происходит быстрее
G = 9.81  # В питоне константы пишутся Caps
PI = 3.14  # В питоне константы пишутся Caps
BLACK = (0, 0, 0)  # В питоне константы пишутся Caps
RED = (255, 0, 0)  # Кортеж TUPLE
red = [255, 0, 0]  # СПИСОК
print(RED.__sizeof__())  # 72 байт СПИСОК
print(red.__sizeof__())  # 48 байт КОРТЕЖ

print(RED.index(255))
print(RED.count(0))


# Кортежи НЕИЗМЕНЯЕМЫ, недьзя заменить, добавить, удалить элемент
# но Кортежи можно складывать
res = BLACK + RED  # Новый кортеж

# num = 1 # <class 'int'>
# print(type(num))
#
# num = 1, # <class 'tuple'>
# print(type(num))

# Пустой Кортеж
empty_tuple = ()  # empty_tuple = tuple()
#   И если в скобки поместить список, множество или строку то он обратится в Кортеж
# Обратное действи - из кортежа соорудить список множество или строку

num = 1,  #  num = (1,) Кортеж состоящий из одного элемента
bum = () # Пустой кортеж
# запись кортежа

a = 1,2  # <class 'tuple'>
print(type(a))
#  Допустим есть 2 переменных и нам необходимо переписать их значения а в б и наоборот
#
a = 2
b = 5
# print(a, b) #  2 5
# print(a)
# print(b)



# # Классический способ замены переменных - с промежуточным результатом
# temp = b
# b = a
# a = temp

# Как это делает питон

a, b = b, a # Свойство взаимного присваивания
print(a, b) # 5 2
# print(a)
# print(b)

# Список из кортежей
cards = [('Дама', 'Червей'), ('Туз', 'Пик')]
print(cards[0][0], cards[0][1]) # Обращение по индексам
print(*cards[0], sep=', ')   # Команда принту рассмотреть кортеж как список,
# а сепаратор выбрать запятой

# num1 =1,
# print(dir(num1))
# ['__add__', '__class__', '__class_getitem__', '__contains__',
# '__delattr__', '__dir__', '__doc__', '__eq__', '__format__',
# '__ge__', '__getattribute__', '__getitem__', '__getnewargs__',
# '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__',
# '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__',
# '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__',
# '__str__', '__subclasshook__', 'count', 'index']
