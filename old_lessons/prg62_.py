# Объектно-ориентированный подход
# Инкапсуляция 1 парадигма ООП =
# каждый объект имеет свой набор полей и свой набор методов
# Количество полей и методов не ограничено

class Ball:
    # Спец. методы выделены двумя подчеркиваниями
     def __init__(self, diameter=1, color='жёлтый'):
         # Поля класса (члены класса) отвечают за свойства обекта
         self.diameter = diameter # self ссылка на объект вызвавшей класс
         # а справа ПЕРЕМЕННАЯ, она вычищается из памяти сразу после обращения и обработки
         self.color = color

    # Методы класса
     def info(self):
        print('мяч имеет цвет: ', self.color)
        print('мяч имеет размер: ', self.diameter)


ball1 = Ball(5, 'синий') # ball1 - экземпляр класса Ball #1
#  В скобках переменные, поля описывающие свойства экземпляра
ball2  = Ball(10, 'красный') # ball2 - экземпляр класса Ball #2
ball3 = Ball()
#ball4 = Ball()
ball4 = ball3 #  в этом случае ball4 физически не существует,
# поскольку ссылается в памяти на один и тот же объект конструктор Ball  не вызван
#  как это проверить =  у каждого объекта есть id
print(id(ball1))  # id  - условный адрес в памяти
print(id(ball2))
print(id(ball3))
print(id(ball4))


ball1.info()
ball2.info()
ball3.info()

#print(ball1.color, ball1.diameter)
#print(ball2.color, ball2.diameter)